version: 2 # use CircleCI 2.0
jobs: # A basic unit of work in a run
  build: # runs not using Workflows must have a `build` job as entry point 
    # directory where steps are run
    working_directory: ~/APITesting
    docker: # run the steps with Docker
      # CircleCI Python images available at: https://hub.docker.com/r/circleci/python/
      - image: circleci/python:3.6.4
        environment: # environment variables for primary container
          PIPENV_VENV_IN_PROJECT: true
    steps: # steps that comprise the `build` job
      - checkout # check out source code to working directory
      - run: sudo chown -R circleci:circleci /usr/local/bin
      - run: sudo chown -R circleci:circleci /usr/local/lib/python3.6/site-packages
      - restore_cache:
      # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          key: APITesting-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
      - run:
          command: |
            sudo pip install pipenv
            pipenv install
      - save_cache: # cache Python dependencies using checksum of Pipfile as the cache-key
          key: APITesting-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
          paths:
            - ".venv"
            - "/usr/local/bin"
            - "/usr/local/lib/python3.6/site-packages"
      - persist_to_workspace:
          root: .
          paths:
            - .venv
  test:
    working_directory: ~/APITesting
    docker: # run the steps with Docker
      # CircleCI Python images available at: https://hub.docker.com/r/circleci/python/
      - image: circleci/python:3.6.4
        environment: # environment variables for primary container
          PIPENV_VENV_IN_PROJECT: true
    steps:
      - checkout
      - attach_workspace:
        # Must be absolute path or relative path from working_directory
          at: .
      - run:
          name: run tests
          command: |
            pipenv run python -m xmlrunner discover tests -o tests/tests-results/
      - store_test_results: # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: tests/tests-results
      - store_artifacts: # Upload test summary for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: tests/tests-results
          destination: tr1
      - run:
          name: run linting config
          command: |
            mkdir tmp
            pipenv run pylint -ry ./src/*.py ./tests/*.py > tmp/pylint.out
      - store_artifacts: # Upload test summary for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: tmp/pylint.out
          destination: pylint.out
  readme:
    working_directory: ~/APITesting
    docker:
      - image: circleci/node
    steps:
      - checkout
      - run:
          command: |
            cd readme2html
      - restore_cache:
          keys:
            - readme2html-{{ .Branch }}-{{ checksum "readme2html/package-lock.json" }}
            - readme2html-{{ .Branch }}
            - readme2html
      - run:
          name: Create HTML out of README.md
          command: |
            cd readme2html
            npm install
            npm start
      - save_cache:
          key: readme2html-{{ .Branch }}-{{ checksum "readme2html/package-lock.json" }}
          paths:
            - readme2html/node_modules
      - run:
          name: check
          command: |
            ls -l
      - persist_to_workspace:
          root: .
          paths:
            - index
  deploy:
    docker:
      - image: buildpack-deps:trusty
    working_directory: ~/APITesting
    steps:
      - checkout
      - attach_workspace:
        # Must be absolute path or relative path from working_directory
          at: .
      - run:
          name: setup git
          command: |
            git config user.email "<email>"
            git config user.name "Deployment Bot"
      - run:
          name: Deploy Master to Heroku
          command: |
            ls -l
            git status
            git add index
            git commit --allow-empty -m "readme.md deploy bot"
            # Push quietly to prevent showing the token in log
            git push --force https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP_NAME.git master
workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build 
      - test:
          requires:
            - build
      - readme        
      - deploy:
          requires:
            - readme
          filters:
            branches:
              only: master